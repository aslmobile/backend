<?php namespace app\modules\api\controllers;

use app\models\Line;
use app\models\Route;
use app\modules\admin\models\Checkpoint;
use app\modules\api\models\Trip;
use app\modules\api\models\Users;
use Yii;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;

use app\modules\api\models\City;

/** @property \app\modules\api\Module $module */
class TripController extends BaseController
{
    public $modelClass = 'app\modules\api\models\RestFul';

    public function init()
    {
        parent::init();

        $authHeader = Yii::$app->request->getHeaders()->get('Authorization');
        if ($authHeader !== null && preg_match('/^Bearer\s+(.*?)$/', $authHeader, $matches)) $this->token = $matches[1];
        else $this->module->setError(403, '_token', "Token required!");
    }

    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'actions' => [
                            'test',
                            'calculate-passenger-tariff',

                            'passenger-comments',
                            'driver-comments',
                            'trips',
                            'passengers',
                            'checkpoint-arrived'
                        ],
                        'allow' => true
                    ]
                ]
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'cities'  => ['GET'],
                    'passengers'  => ['GET'],
                    'checkpoint-arrived' => ['POST']
                ]
            ]
        ];
    }

    public function beforeAction($event)
    {
        $user = $this->TokenAuth(self::TOKEN);
        if ($user) $user = $this->user;

        return parent::beforeAction($event); // TODO: Change the autogenerated stub
    }

    public function actionAcceptSeat($id)
    {
        $user = $this->TokenAuth(self::TOKEN);
        if ($user) $user = $this->user;

        $this->prepareBody();
        $this->validateBodyParams(['passenger_id']);

        /** @var \app\models\Line $line */
        $line = Line::findOne($id);
        if (!$line) $this->module->setError(422, '_line', "Not Found");

        /** @var \app\models\Trip $trip */
        $trip = Trip::find()->where(['route_id' => $line->route_id, 'driver_id' => $line->driver_id, 'user_id' => $this->body->passenger_id])->one();
        if (!$trip) $this->module->setError(422, '_trip', "Not Found");

        $trip->status = Trip::STATUS_TRIP;

        if (!$trip->validate() || !$trip->save())
        {
            if ($trip->hasErrors())
            {
                foreach ($trip->errors as $field => $error_message)
                    $this->module->setError(422, 'trip.' . $field, $error_message, true, false);
                $this->module->sendResponse();
            }
            else $this->module->setError(422, 'trip', "Can't validate model from data.");
        }

        $this->module->data['line'] = $line->toArray();
        $this->module->data['trip'] = $trip->toArray();
        $this->module->setSuccess();
        $this->module->sendResponse();
    }

    public function actionArriveEndpoint($id)
    {
        $user = $this->TokenAuth(self::TOKEN);
        if ($user) $user = $this->user;

        $this->prepareBody();
        $this->validateBodyParams(['cancel_reason_trip', 'cancel_reason_line']);

        /** @var \app\models\Line $line */
        $line = Line::findOne($id);
        if (!$line) $this->module->setError(422, '_line', "Not Found");

        /** @var \app\models\Trip $trip */
        $trips = Trip::find()->andWhere(['route_id' => $line->route_id, 'vehicle_id' => $line->vehicle_id, 'driver_id' => $line->driver_id])->all();
        if (!$trips) $this->module->setError(422, '_trip', "Not Found");

        $_trips = [];
        foreach ($trips as $trip)
        {
            $trip->status = Trip::STATUS_ENDED;

            if (!$trip->validate() || !$trip->save())
            {
                if ($trip->hasErrors())
                {
                    foreach ($trip->errors as $field => $error_message)
                        $this->module->setError(422, 'trip.' . $field, $error_message, true, false);
                    $this->module->sendResponse();
                }
                else $this->module->setError(422, 'trip', "Can't validate model from data.");
            }

            $_trips[] = $trip->toArray();
        }

        $this->module->data['line'] = $line->toArray();
        $this->module->data['trips'] = $_trips;
        $this->module->setSuccess();
        $this->module->sendResponse();
    }

    public function actionRatePassenger($id)
    {
        $user = $this->TokenAuth(self::TOKEN);
        if ($user) $user = $this->user;

        $this->prepareBody();
        $this->validateBodyParams(['passenger_id', 'passenger_rating', 'driver_comment']);

        /** @var \app\models\Line $line */
        $line = Line::findOne($id);
        if (!$line) $this->module->setError(422, '_line', "Not Found");

        /** @var \app\models\Trip $trip */
        $trip = Trip::find()->where(['route_id' => $line->route_id, 'driver_id' => $line->driver_id, 'user_id' => $this->body->passenger_id])->one();
        if (!$trip) $this->module->setError(422, '_trip', "Not Found");

        $trip->passenger_rating = floatval($this->body->passenger_rating);
        $trip->driver_comment = $this->body->driver_comment;

        if (!$trip->validate() || !$trip->save())
        {
            if ($trip->hasErrors())
            {
                foreach ($trip->errors as $field => $error_message)
                    $this->module->setError(422, 'trip.' . $field, $error_message, true, false);
                $this->module->sendResponse();
            }
            else $this->module->setError(422, 'trip', "Can't validate model from data.");
        }

        $this->module->data['line'] = $line->toArray();
        $this->module->data['trip'] = $trip->toArray();
        $this->module->setSuccess();
        $this->module->sendResponse();
    }

    public function actionCheckpointArrived()
    {
        $user = $this->TokenAuth(self::TOKEN);
        if ($user) $user = $this->user;

        $this->prepareBody();
        $this->validateBodyParams(['checkpoint']);

        $checkpoint = Checkpoint::findOne(intval($this->body->checkpoint));
        if (!$checkpoint) $this->module->setError(422, 'checkpoint', "Not Found");

        // TODO: Отправить на сокет сообщение что водитель подъехал к checkpoint

        $this->module->data = $checkpoint->toArray();
        $this->module->setSuccess();
        $this->module->sendResponse();
    }

    public function actionPassengerComments($id)
    {
        $user = $this->TokenAuth(self::TOKEN);
        if ($user) $user = $this->user;

        $trips = $this->getUserTrips($id);
        $reviews = [];

        /** @var \app\modules\api\models\Trip $trip */
        if ($trips && count($trips) > 0) foreach ($trips as $trip)
        {
            if (!empty($trip->passenger_comment) && intval($trip->passenger_rating)) $reviews[] = [
                'rating' => $trip->passenger_rating,
                'comment' => $trip->passenger_comment
            ];
        }

        $this->module->data = $reviews;
        $this->module->setSuccess();
        $this->module->sendResponse();
    }

    public function actionDriverComments($id)
    {
        $user = $this->TokenAuth(self::TOKEN);
        if ($user) $user = $this->user;

        $trips = $this->getDriverTrips($id);
        $reviews = [];

        /** @var \app\modules\api\models\Trip $trip */
        if ($trips && count($trips) > 0) foreach ($trips as $trip)
        {
            if (!empty($trip->passenger_comment) && intval($trip->passenger_rating)) $reviews[] = [
                'rating' => $trip->passenger_rating,
                'comment' => $trip->passenger_comment
            ];
        }

        $this->module->data = $reviews;
        $this->module->setSuccess();
        $this->module->sendResponse();
    }

    public function actionTrips()
    {
        $user = $this->TokenAuth(self::TOKEN);
        if ($user) $user = $this->user;

        $trips = [];
        $_trips = Trip::find()->where(['driver_id' => $user->id])->all();
        if ($_trips && count($_trips) > 0) foreach ($_trips as $trip) $trips[] = $trip->toArray();

        $this->module->data = $trips;
        $this->module->setSuccess();
        $this->module->sendResponse();
    }

    public function actionTest($id)
    {
        $tariff = $this->calculatePassengerTariff($id);

        $this->module->data['tariff'] = $tariff;
        $this->module->setSuccess();
        $this->module->sendResponse();
    }

    public function actionPassengers($id)
    {
        $user = $this->TokenAuth(self::TOKEN);
        if ($user) $user = $this->user;

        /** @var \app\models\Line $line */
        $line = Line::findOne($id);
        if (!$line) $this->module->setError(422, 'line', "Not Found");

        /** @var \app\models\Trip $trip */
        $trips = Trip::find()->andWhere(['route_id' => $line->route_id, 'vehicle_id' => $line->vehicle_id, 'driver_id' => $line->driver_id])->all();
        if (!$trips) $this->module->setError(422, '_trip', "Not Found");

        $_passengers = [];
        /** @var \app\models\Trip $passenger */
        foreach ($trips as $passenger) $_passengers[] = [
            'passenger' => $passenger->user->toArray(),
            'seats' => intval($passenger->seats)
        ];

        $this->module->data = $_passengers;
        $this->module->setSuccess();
        $this->module->sendResponse();
    }

    public function actionAcceptDeparture($id)
    {
        $user = $this->TokenAuth(self::TOKEN);
        if ($user) $user = $this->user;

        $this->prepareBody();

        /** @var \app\models\Line $line */
        $line = Line::findOne($id);
        if (!$line) $this->module->setError(422, '_line', "Not Found");

        /** @var \app\models\Trip $trip */
        $trip = Trip::find()->where(['route_id' => $line->route_id, 'driver_id' => $line->driver_id, 'user_id' => $user->id])->one();
        if (!$trip) $this->module->setError(422, '_trip', "Not Found");

        $trip->status = Trip::STATUS_TRIP;

        $this->module->data['trip'] = $trip->toArray();
        $this->module->data['line'] = $line->toArray();
        $this->module->setSuccess();
        $this->module->sendResponse();
    }

    /** CORE METHODS | PROTECTED */

    protected function getRate($route_id)
    {
        /** @var \app\models\Line $line */
        $lines = Line::find()->andWhere([
            'AND',
            ['=', 'route_id', $route_id]
        ])->all();

        if (!$lines) $this->module->setError(422, '_line', "Not Found");

        $seats = 0;
        foreach ($lines as $line) $seats += $line->freeseats;

        $passengers = Trip::find()->andWhere([
            'AND',
            ['=', 'route_id', $route_id],
            ['=', 'driver_id', 0]
        ])->count();

        if ($seats == 0) $rate = 1.5;
        elseif ($passengers == 0) $rate = 1;
        else
        {
            $hard_rate = round($passengers / $seats, 2);

            if ($hard_rate <= .35) $rate = 1;
            elseif ($hard_rate >= .35 && $hard_rate <= .6) $rate = 1.1;
            elseif ($hard_rate >= .6 && $hard_rate <= .7) $rate = 1.2;
            elseif ($hard_rate >= .7 && $hard_rate <= .8) $rate = 1.3;
            elseif ($hard_rate >= .8 && $hard_rate <= .9) $rate = 1.4;
            else $rate = 1.5;
        }

        return $rate;
    }

    protected function calculatePassengerTariff($id)
    {
        $rate = $this->getRate($id);
        $taxi_tariff = 0;

        /** @var \app\models\Route $route */
        $route = Route::find()->where(['id' => $id])->one();
        if (!$route) $this->module->setError(422, '_route', "Not Found");

        $tariff = $route->base_tariff * $rate + $taxi_tariff;

        return [
            'base_tariff' => $route->base_tariff,
            'tariff' => $tariff
        ];
    }

    protected function calculateDriverTariff()
    {
        /**
         * Расчет тарифа по зависимостям:
         * - Базовый тариф
         * - Задолженость
         * - Спрос
         *
         * ((кол-во пассажиров / кол-во мест) * базовый тариф) * коофициент + задолженость
         */
    }

    protected function getTrips($id, $type = 'user')
    {
        switch ($type)
        {
            case 'user': return $this->getUserTrips($id);
                break;

            case 'driver': return $this->getDriverTrips($id);
                break;
        }

        return false;
    }

    protected function getUserTrips($id)
    {
        return Trip::find()->where(['user_id' => $id])->all();
    }

    protected function getDriverTrips($id)
    {
        return Trip::find()->where(['driver_id' => $id])->all();
    }
}